snippet stles Create stateless widget
	class $1 extends StatelessWidget {
		const $1({super.key});

			@override
			Widget build(BuildContext context) {
				return ${0:SizedBox.shrink()};
			}
	}

snippet stful Create stateful widget
	class $1 extends StatefulWidget {
		const $1({super.key});

		@override
		State<$1> createState() => _$1State();
	}

	class _$1State extends State<$1> {
		@override
		Widget build(BuildContext context) {
			return ${0:SizedBox.shrink()};
		}
	}

snippet im
	import 'package:${1}/${2}.dart';
	${0}

snippet rgx
	new RegExp(r'${1}')

snippet var
	var ${1} = ${2};

snippet main
	main() {
	  ${0}
	}

snippet class
	class ${1:`vim_snippets#Filename("", "untitled")`} {
		${0}
	}
snippet in
	interface ${1:`vim_snippets#Filename("", "untitled")`} {
		${0}
	}

snippet if
	if (${1:true}) {
	  ${0}
	}
snippet ifels
	if (${1:true}) {
	  ${2}
	} else {
	  ${0}
	}

snippet switch
	switch (${1}) {
	  ${0}
	}
snippet for
	for (var ${2:i} = 0, len = ${1:things}.length; $2 < len; ${3:++}$2) {
	  ${0:$1[$2]}
	}
snippet fore
	for (final ${2:item} in ${1:itemList}) {
	  ${0}
	}
snippet wh
	while ($1) {
	  ${0}
	}
snippet dowhile
	do {
	  ${0}
	} while ($0);

snippet try
	try {
	  ${0:${VISUAL}}
	} catch (${1:Exception e}) {
	}
snippet tryf
	try {
	  ${0:${VISUAL}}
	} catch (${1:Exception e}) {
	} finally {
	}
